from puzzle import TentsAndTreesPuzzle
from solver import TentsAndTreesSolver

## TODO: 
# - Create readme BUT figure out why we need all constraints first. I would like to include examples of why each constraint is necessary.
#   - Doesn't seem that the _add_unshared_tree_constraints constraint is necessary, but let's include it and simply write a comment about it
# - Publish to PyPI
# - Get ImageParser cleaned up in other repo
# - Make streamlit app 
# - Change model (and streamlit app) to handle puzzles with missing row/col sums


# Example puzzle data

# 7x7_daily
# row_sums = [2,1,2,1,2,2,0]
# col_sums = [2,1,2,1,1,1,2]
# tree_positions = {(0,0), (1,2),(1,6),(2,4),(3,0),(4,2),(4,5),(4,6),(5,0),(6,2)}

# 22B20
row_sums = [8, 1, 6, 2, 6, 2, 6, 3, 7, 3, 5, 1, 6, 5, 4, 5, 2, 5, 3, 4, 2, 8]
col_sums = [4, 5, 4, 3, 6, 4, 4, 1, 9, 1, 6, 4, 6, 2, 3, 5, 2, 6, 4, 5, 5, 5]
tree_positions = {(21, 16), (20, 20), (19, 0), (5, 10), (8, 18), (0, 14), (7, 1), (15, 14), (21, 9), (6, 20), (7, 19), (18, 19), (8, 2), (9, 10), (2, 4), (5, 21), (18, 3), (6, 13), (7, 21), (18, 21), (12, 20), (3, 17), (0, 9), (15, 9), (7, 5), (16, 17), (3, 1), (14, 1), (12, 13), (14, 10), (9, 5), (0, 2), (4, 18), (10, 15), (16, 10), (18, 16), (14, 3), (12, 15), (9, 7), (3, 21), (15, 4), (16, 12), (21, 11), (4, 13), (10, 1), (8, 13), (20, 5), (14, 16), (13, 2), (1, 18), (2, 17), (14, 0), (14, 9), (4, 8), (1, 2), (0, 4), (2, 10), (1, 20), (2, 19), (20, 0), (14, 11), (4, 10), (19, 10), (10, 7), (11, 6), (10, 16), (21, 1), (12, 7), (3, 4), (14, 4), (17, 6), (10, 9), (19, 21), (9, 20), (15, 8), (6, 5), (13, 20), (21, 3), (0, 10), (0, 19), (6, 16), (7, 15), (21, 14), (17, 1), (5, 8), (8, 7), (14, 20), (11, 3), (2, 0), (9, 15), (0, 12), (13, 15), (18, 8), (21, 7)}

# 22B1
row_sums = [5, 5, 2, 7, 1, 7, 2, 3, 6, 3, 6, 3, 6, 3, 3, 6, 3, 7, 1, 9, 1, 9]
col_sums = [7, 3, 7, 2, 6, 3, 4, 5, 4, 3, 6, 3, 5, 4, 6, 2, 6, 2, 8, 2, 4, 6]
tree_positions = {(21, 16), (9, 8), (2, 2), (5, 19), (1, 15), (8, 2), (11, 7), (13, 1), (15, 7), (7, 3), (18, 12), (17, 7), (14, 17), (3, 17), (5, 14), (11, 0), (17, 16), (0, 9), (15, 0), (16, 8), (13, 21), (20, 8), (12, 13), (3, 19), (5, 16), (11, 2), (1, 3), (13, 14), (16, 19), (20, 1), (20, 19), (9, 16), (15, 4), (8, 20), (10, 17), (19, 20), (2, 13), (7, 9), (21, 11), (3, 14), (10, 1), (1, 7), (7, 2), (13, 18), (18, 2), (20, 14), (21, 13), (4, 6), (8, 15), (19, 15), (11, 11), (7, 4), (1, 18), (6, 8), (21, 15), (10, 5), (1, 2), (2, 10), (6, 10), (20, 9), (12, 5), (7, 18), (3, 11), (19, 1), (8, 10), (19, 19), (20, 11), (14, 4), (12, 16), (4, 21), (19, 3), (17, 15), (8, 12), (19, 21), (9, 20), (20, 4), (12, 9), (19, 5), (0, 1), (17, 17), (2, 7), (0, 19), (21, 5), (16, 18), (17, 1), (5, 8), (11, 3), (2, 0), (5, 17), (10, 13), (14, 20), (11, 12), (0, 21), (6, 0), (15, 12), (16, 11), (18, 8), (21, 7)}

# 22B11
row_sums = [7, 3, 6, 3, 6, 4, 6, 4, 4, 5, 3, 3, 7, 2, 5, 5, 1, 8, 2, 6, 4, 4]
col_sums = [7, 3, 3, 6, 4, 6, 4, 4, 3, 3, 6, 5, 4, 3, 4, 6, 1, 10, 0, 7, 2, 7]
tree_positions = {(21, 16), (4, 9), (19, 0), (14, 13), (8, 9), (2, 2), (8, 18), (19, 18), (6, 2), (18, 1), (4, 2), (5, 3), (8, 2), (12, 18), (17, 14), (18, 3), (1, 17), (6, 13), (16, 15), (7, 21), (3, 17), (1, 10), (13, 12), (16, 8), (18, 5), (16, 17), (20, 8), (3, 1), (3, 10), (19, 6), (0, 2), (3, 19), (4, 18), (1, 21), (2, 20), (21, 18), (17, 11), (9, 7), (11, 4), (4, 20), (1, 5), (13, 7), (6, 1), (10, 17), (7, 9), (21, 20), (9, 0), (13, 0), (18, 2), (2, 15), (7, 11), (6, 15), (5, 4), (10, 12), (1, 9), (10, 21), (11, 20), (12, 3), (14, 0), (15, 20), (0, 4), (17, 20), (1, 11), (2, 19), (14, 11), (16, 2), (9, 18), (0, 15), (2, 12), (20, 11), (21, 10), (12, 7), (14, 4), (7, 20), (12, 16), (17, 6), (19, 3), (8, 12), (8, 21), (16, 4), (6, 5), (21, 3), (15, 17), (6, 14), (18, 13), (14, 6), (0, 1), (11, 1), (15, 10), (6, 7), (7, 6), (15, 19), (18, 15), (12, 11), (4, 7), (5, 17), (17, 19), (9, 15)}

# 22B15
row_sums = [11, 0, 11, 0, 7, 3, 4, 4, 5, 5, 3, 6, 3, 4, 4, 4, 6, 5, 2, 7, 2, 9]
col_sums = [8, 2, 7, 2, 6, 4, 4, 4, 3, 6, 4, 6, 4, 5, 4, 5, 3, 7, 2, 8, 3, 8]
tree_positions = {(5, 1), (10, 6), (9, 8), (0, 5), (5, 19), (0, 14), (15, 5), (18, 1), (21, 0), (7, 19), (3, 15), (17, 14), (0, 7), (2, 4), (5, 21), (13, 1), (15, 7), (7, 21), (12, 20), (3, 17), (15, 9), (18, 14), (20, 8), (17, 0), (3, 10), (17, 9), (13, 14), (15, 11), (1, 21), (20, 1), (21, 18), (14, 12), (3, 21), (5, 18), (4, 20), (1, 5), (16, 3), (7, 0), (13, 16), (16, 12), (18, 9), (16, 21), (21, 11), (21, 20), (10, 10), (13, 9), (7, 2), (10, 19), (0, 18), (12, 1), (6, 15), (21, 13), (14, 7), (5, 4), (5, 13), (4, 15), (8, 6), (10, 3), (1, 0), (17, 18), (10, 12), (1, 9), (11, 11), (2, 8), (0, 20), (21, 15), (14, 18), (1, 2), (13, 4), (17, 20), (8, 17), (19, 17), (6, 10), (3, 2), (4, 1), (21, 17), (3, 11), (16, 2), (10, 16), (1, 13), (9, 18), (19, 19), (8, 12), (10, 9), (19, 12), (9, 20), (2, 14), (20, 4), (21, 3), (15, 17), (4, 5), (0, 1), (11, 1), (0, 10), (20, 6), (21, 5), (5, 8), (10, 4), (14, 20), (19, 16), (10, 13), (9, 15), (0, 12), (11, 21), (2, 18)}

# 5A1
row_sums = [1, 1, 0, 2, 1]      # Terns per row
col_sums = [2, 0, 1, 1, 1]      # Terns per column
tree_positions = {(1, 1), (1, 3), (3, 0), (3, 1), (4, 4)} # Tree positions

puzzle = TentsAndTreesPuzzle(row_sums, col_sums, tree_positions)

# Display the puzzle
print("Puzzle:")
print(puzzle.display_board())

# Solve the puzzle
solver = TentsAndTreesSolver(puzzle)
solution = solver.solve()

if solution:
    print(f"\nSolution found! Tent positions: {solution}")
    
    # Validate the solution
    is_valid, errors = puzzle.validate_solution(solution)
    print(f"Solution is valid: {is_valid}")
    
    # Display the solved board
    print("\nSolved puzzle:")
    print(puzzle.display_board(tent_positions=solution))
    
    # Get solver information
    info = solver.get_solver_info()
    print(f"\nModel consists of {info['variables']} variables and {info['constraints']} constraints")
else:
    print("No solution exists")

exit()

print("Solver info:", solver.get_solver_info())
# print("Model:")
# print(solver.export_model())
# print("\nPuzzle:")
# puzzle.print_board()

solution = solver.solve(verbose=True)
print(solution)

# 22B20
# assert solution == {(3, 13), (17, 12), (0, 5), (17, 21), (2, 11), (15, 5), (21, 0), (17, 5), (9, 1), (19, 11), (13, 10), (6, 4), (10, 20), (21, 2), (14, 8), (3, 8), (14, 17), (16, 8), (21, 4), (13, 21), (5, 7), (14, 19), (1, 3), (13, 14), (2, 20), (12, 6), (17, 2), (14, 12), (5, 9), (4, 11), (11, 4), (10, 8), (19, 20), (18, 0), (7, 0), (10, 17), (18, 18), (12, 8), (4, 4), (21, 20), (13, 0), (10, 10), (7, 2), (0, 18), (6, 15), (20, 14), (12, 19), (8, 15), (0, 11), (0, 20), (6, 17), (12, 12), (4, 17), (8, 8), (19, 8), (13, 4), (2, 1), (8, 17), (10, 14), (0, 13), (21, 8), (6, 19), (4, 1), (21, 17), (4, 19), (8, 10), (8, 19), (0, 15), (15, 15), (6, 12), (21, 10), (6, 21), (12, 16), (4, 21), (19, 3), (8, 12), (0, 8), (2, 5), (8, 21), (21, 12), (9, 4), (0, 1), (2, 16), (15, 1), (15, 10), (20, 6), (7, 6), (12, 2), (16, 18), (18, 15), (17, 10), (9, 6), (2, 18), (15, 3)}
# 22B15
assert solution == {(7, 17), (4, 0), (21, 16), (8, 0), (19, 9), (17, 21), (19, 18), (9, 17), (2, 11), (13, 17), (16, 13), (7, 10), (4, 2), (8, 2), (5, 12), (19, 11), (9, 10), (9, 19), (11, 16), (6, 4), (15, 16), (7, 12), (19, 4), (0, 0), (11, 0), (9, 12), (0, 9), (21, 4), (15, 18), (14, 1), (5, 7), (19, 6), (0, 2), (9, 14), (13, 5), (17, 2), (11, 4), (10, 8), (13, 7), (6, 1), (19, 20), (18, 0), (2, 13), (4, 4), (14, 14), (16, 5), (2, 15), (19, 15), (0, 11), (16, 7), (10, 21), (2, 17), (21, 6), (15, 20), (14, 9), (8, 8), (0, 4), (16, 0), (0, 13), (11, 13), (16, 9), (2, 19), (20, 0), (21, 8), (6, 19), (14, 11), (4, 10), (4, 19), (11, 6), (2, 3), (0, 6), (0, 15), (2, 21), (20, 2), (21, 10), (6, 21), (21, 19), (4, 21), (17, 15), (2, 5), (8, 21), (0, 17), (13, 20), (18, 13), (21, 12), (12, 9), (21, 21), (4, 14), (8, 5), (10, 2), (17, 17), (2, 7), (11, 19), (0, 19), (12, 2), (7, 15), (21, 14), (12, 11), (5, 17), (2, 0), (17, 19), (2, 9), (0, 21), (15, 3), (16, 11)}
if solution:
    print("\nSolution:")
    puzzle.print_board(tent_positions=solution)
    
    # Validate the solution
    is_valid, errors = puzzle.validate_solution(solution)
    if is_valid:
        print("Solution is valid!")
    else:
        print("Solution has errors:")
        for error in errors:
            print(f"  - {error}")
else:
    print("No solution found")